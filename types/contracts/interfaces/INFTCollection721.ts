/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface INFTCollection721Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "description"
      | "initialize"
      | "isTokenForSale"
      | "listingEndTime"
      | "listingStartTime"
      | "maxSupply"
      | "mint"
      | "setTokenForSale"
      | "setTokenSalePrice"
      | "supportsInterface"
      | "tokenForSale"
      | "tokenSalePrice"
      | "tokenURI"
      | "totalMinted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TokenMinted"
      | "TokenPutForSale"
      | "TokenSalePriceSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingEndTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listingStartTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenForSale",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenSalePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSalePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMinted",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSalePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMinted",
    data: BytesLike
  ): Result;
}

export namespace TokenMintedEvent {
  export type InputTuple = [
    collection: AddressLike,
    recipient: AddressLike,
    tokenId: BigNumberish,
    tokenUri: string
  ];
  export type OutputTuple = [
    collection: string,
    recipient: string,
    tokenId: bigint,
    tokenUri: string
  ];
  export interface OutputObject {
    collection: string;
    recipient: string;
    tokenId: bigint;
    tokenUri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPutForSaleEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    forSale: boolean,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    forSale: boolean,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    forSale: boolean;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSalePriceSetEvent {
  export type InputTuple = [tokenId: BigNumberish, price: BigNumberish];
  export type OutputTuple = [tokenId: bigint, price: bigint];
  export interface OutputObject {
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface INFTCollection721 extends BaseContract {
  connect(runner?: ContractRunner | null): INFTCollection721;
  waitForDeployment(): Promise<this>;

  interface: INFTCollection721Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  description: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      name_: string,
      symbol_: string,
      description_: string,
      maxSupply_: BigNumberish,
      royaltyReceiver: AddressLike,
      royaltyFeeNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isTokenForSale: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  listingEndTime: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  listingStartTime: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  maxSupply: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, tokenURI_: string],
    [void],
    "nonpayable"
  >;

  setTokenForSale: TypedContractMethod<
    [
      tokenId: BigNumberish,
      forSale: boolean,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTokenSalePrice: TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenForSale: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  tokenSalePrice: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalMinted: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      name_: string,
      symbol_: string,
      description_: string,
      maxSupply_: BigNumberish,
      royaltyReceiver: AddressLike,
      royaltyFeeNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTokenForSale"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "listingEndTime"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "listingStartTime"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, tokenURI_: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenForSale"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      forSale: boolean,
      startTime: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenSalePrice"
  ): TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenForSale"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenSalePrice"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalMinted"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "TokenMinted"
  ): TypedContractEvent<
    TokenMintedEvent.InputTuple,
    TokenMintedEvent.OutputTuple,
    TokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokenPutForSale"
  ): TypedContractEvent<
    TokenPutForSaleEvent.InputTuple,
    TokenPutForSaleEvent.OutputTuple,
    TokenPutForSaleEvent.OutputObject
  >;
  getEvent(
    key: "TokenSalePriceSet"
  ): TypedContractEvent<
    TokenSalePriceSetEvent.InputTuple,
    TokenSalePriceSetEvent.OutputTuple,
    TokenSalePriceSetEvent.OutputObject
  >;

  filters: {
    "TokenMinted(address,address,uint256,string)": TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
    TokenMinted: TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;

    "TokenPutForSale(uint256,bool,uint256,uint256)": TypedContractEvent<
      TokenPutForSaleEvent.InputTuple,
      TokenPutForSaleEvent.OutputTuple,
      TokenPutForSaleEvent.OutputObject
    >;
    TokenPutForSale: TypedContractEvent<
      TokenPutForSaleEvent.InputTuple,
      TokenPutForSaleEvent.OutputTuple,
      TokenPutForSaleEvent.OutputObject
    >;

    "TokenSalePriceSet(uint256,uint256)": TypedContractEvent<
      TokenSalePriceSetEvent.InputTuple,
      TokenSalePriceSetEvent.OutputTuple,
      TokenSalePriceSetEvent.OutputObject
    >;
    TokenSalePriceSet: TypedContractEvent<
      TokenSalePriceSetEvent.InputTuple,
      TokenSalePriceSetEvent.OutputTuple,
      TokenSalePriceSetEvent.OutputObject
    >;
  };
}
