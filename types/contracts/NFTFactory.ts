/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface NFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "admins"
      | "approveProject"
      | "approvedProjects"
      | "collectionOwners"
      | "createERC1155Collection"
      | "createERC721Collection"
      | "initialize"
      | "owner"
      | "rejectProject"
      | "removeAdmin"
      | "renounceOwnership"
      | "submitProject"
      | "submittedProjects"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC1155CollectionCreated"
      | "ERC721CollectionCreated"
      | "Initialized"
      | "OwnershipTransferred"
      | "ProjectApproved"
      | "ProjectRejected"
      | "ProjectSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "approveProject",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedProjects",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionOwners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC1155Collection",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createERC721Collection",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectProject",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitProject",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submittedProjects",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC1155Collection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createERC721Collection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submittedProjects",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ERC1155CollectionCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    collectionAddress: AddressLike,
    name: string,
    symbol: string,
    description: string,
    maxSupply: BigNumberish,
    royaltyFeeNumerator: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    collectionAddress: string,
    name: string,
    symbol: string,
    description: string,
    maxSupply: bigint,
    royaltyFeeNumerator: bigint
  ];
  export interface OutputObject {
    owner: string;
    collectionAddress: string;
    name: string;
    symbol: string;
    description: string;
    maxSupply: bigint;
    royaltyFeeNumerator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC721CollectionCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    collectionAddress: AddressLike,
    name: string,
    symbol: string,
    description: string,
    maxSupply: BigNumberish,
    royaltyFeeNumerator: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    collectionAddress: string,
    name: string,
    symbol: string,
    description: string,
    maxSupply: bigint,
    royaltyFeeNumerator: bigint
  ];
  export interface OutputObject {
    owner: string;
    collectionAddress: string;
    name: string;
    symbol: string;
    description: string;
    maxSupply: bigint;
    royaltyFeeNumerator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectApprovedEvent {
  export type InputTuple = [project: AddressLike, approver: AddressLike];
  export type OutputTuple = [project: string, approver: string];
  export interface OutputObject {
    project: string;
    approver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectRejectedEvent {
  export type InputTuple = [project: AddressLike, rejecter: AddressLike];
  export type OutputTuple = [project: string, rejecter: string];
  export interface OutputObject {
    project: string;
    rejecter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectSubmittedEvent {
  export type InputTuple = [submitter: AddressLike, projectDetails: string];
  export type OutputTuple = [submitter: string, projectDetails: string];
  export interface OutputObject {
    submitter: string;
    projectDetails: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): NFTFactory;
  waitForDeployment(): Promise<this>;

  interface: NFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  approveProject: TypedContractMethod<
    [project: AddressLike],
    [void],
    "nonpayable"
  >;

  approvedProjects: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  collectionOwners: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  createERC1155Collection: TypedContractMethod<
    [
      name_: string,
      symbol_: string,
      description_: string,
      maxSupply_: BigNumberish,
      royaltyFeeNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createERC721Collection: TypedContractMethod<
    [
      name_: string,
      symbol_: string,
      description_: string,
      maxSupply_: BigNumberish,
      royaltyFeeNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  rejectProject: TypedContractMethod<
    [project: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitProject: TypedContractMethod<
    [projectDetails: string],
    [void],
    "nonpayable"
  >;

  submittedProjects: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { details: string; status: bigint }],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "approveProject"
  ): TypedContractMethod<[project: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedProjects"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "collectionOwners"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "createERC1155Collection"
  ): TypedContractMethod<
    [
      name_: string,
      symbol_: string,
      description_: string,
      maxSupply_: BigNumberish,
      royaltyFeeNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createERC721Collection"
  ): TypedContractMethod<
    [
      name_: string,
      symbol_: string,
      description_: string,
      maxSupply_: BigNumberish,
      royaltyFeeNumerator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rejectProject"
  ): TypedContractMethod<[project: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitProject"
  ): TypedContractMethod<[projectDetails: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submittedProjects"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { details: string; status: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ERC1155CollectionCreated"
  ): TypedContractEvent<
    ERC1155CollectionCreatedEvent.InputTuple,
    ERC1155CollectionCreatedEvent.OutputTuple,
    ERC1155CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ERC721CollectionCreated"
  ): TypedContractEvent<
    ERC721CollectionCreatedEvent.InputTuple,
    ERC721CollectionCreatedEvent.OutputTuple,
    ERC721CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProjectApproved"
  ): TypedContractEvent<
    ProjectApprovedEvent.InputTuple,
    ProjectApprovedEvent.OutputTuple,
    ProjectApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectRejected"
  ): TypedContractEvent<
    ProjectRejectedEvent.InputTuple,
    ProjectRejectedEvent.OutputTuple,
    ProjectRejectedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectSubmitted"
  ): TypedContractEvent<
    ProjectSubmittedEvent.InputTuple,
    ProjectSubmittedEvent.OutputTuple,
    ProjectSubmittedEvent.OutputObject
  >;

  filters: {
    "ERC1155CollectionCreated(address,address,string,string,string,uint256,uint256)": TypedContractEvent<
      ERC1155CollectionCreatedEvent.InputTuple,
      ERC1155CollectionCreatedEvent.OutputTuple,
      ERC1155CollectionCreatedEvent.OutputObject
    >;
    ERC1155CollectionCreated: TypedContractEvent<
      ERC1155CollectionCreatedEvent.InputTuple,
      ERC1155CollectionCreatedEvent.OutputTuple,
      ERC1155CollectionCreatedEvent.OutputObject
    >;

    "ERC721CollectionCreated(address,address,string,string,string,uint256,uint256)": TypedContractEvent<
      ERC721CollectionCreatedEvent.InputTuple,
      ERC721CollectionCreatedEvent.OutputTuple,
      ERC721CollectionCreatedEvent.OutputObject
    >;
    ERC721CollectionCreated: TypedContractEvent<
      ERC721CollectionCreatedEvent.InputTuple,
      ERC721CollectionCreatedEvent.OutputTuple,
      ERC721CollectionCreatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProjectApproved(address,address)": TypedContractEvent<
      ProjectApprovedEvent.InputTuple,
      ProjectApprovedEvent.OutputTuple,
      ProjectApprovedEvent.OutputObject
    >;
    ProjectApproved: TypedContractEvent<
      ProjectApprovedEvent.InputTuple,
      ProjectApprovedEvent.OutputTuple,
      ProjectApprovedEvent.OutputObject
    >;

    "ProjectRejected(address,address)": TypedContractEvent<
      ProjectRejectedEvent.InputTuple,
      ProjectRejectedEvent.OutputTuple,
      ProjectRejectedEvent.OutputObject
    >;
    ProjectRejected: TypedContractEvent<
      ProjectRejectedEvent.InputTuple,
      ProjectRejectedEvent.OutputTuple,
      ProjectRejectedEvent.OutputObject
    >;

    "ProjectSubmitted(address,string)": TypedContractEvent<
      ProjectSubmittedEvent.InputTuple,
      ProjectSubmittedEvent.OutputTuple,
      ProjectSubmittedEvent.OutputObject
    >;
    ProjectSubmitted: TypedContractEvent<
      ProjectSubmittedEvent.InputTuple,
      ProjectSubmittedEvent.OutputTuple,
      ProjectSubmittedEvent.OutputObject
    >;
  };
}
